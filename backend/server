#!/usr/bin/python
from BaseHTTPServer import BaseHTTPRequestHandler,HTTPServer
from os import curdir, sep
from cgi import parse_header, parse_multipart
from urlparse import parse_qs

PORT_NUMBER = 3003

#This class will handles any incoming request from
#the browser 
class myHandler(BaseHTTPRequestHandler):
	
	def do_POST(self):
		if self.path == "/login":
			length = int(self.headers['content-length'])
 			ctype, pdict = parse_header(self.headers['content-type'])
 			postvars = parse_qs(self.rfile.read(length), keep_blank_values=1)
 			print postvars

	#Handler for the GET requests
	def do_GET(self):
		if self.path=="/test":
			
			self.path="/index_example2.html"

		try:
			#Check the file extension required and
			#set the right mime type

			sendReply = False
			if self.path.endswith(".html"):
				mimetype='text/html'
				sendReply = True
			if self.path.endswith(".jpg"):
				mimetype='image/jpg'
				sendReply = True
			if self.path.endswith(".gif"):
				mimetype='image/gif'
				sendReply = True
			if self.path.endswith(".js"):
				mimetype='application/javascript'
				sendReply = True
			if self.path.endswith(".css"):
				mimetype='text/css'
				sendReply = True

			if sendReply == True:
				#Open the static file requested and send it
				f = open(curdir + sep + self.path) 
				self.send_response(200)
				self.send_header('Content-type',mimetype)
				self.end_headers()
				self.wfile.write(f.read())
				f.close()
			return


		except IOError:
			self.send_error(404,'File Not Found: %s' % self.path)


import json
class BallinFileManager:


	def writeFile(self, name, data):
		with open(name, 'w') as outfile:
			json.dump(data, outfile)

	def readFile(self, name):
		jsonData = open(name)
		data = json.load(jsonData)
		jsonData.close()
		return data

'''
try:
	#Create a web server and define the handler to manage the
	#incoming request
	server = HTTPServer(('', PORT_NUMBER), myHandler)
	print 'Started httpserver on port ' , PORT_NUMBER
	
	#Wait forever for incoming htto requests
	server.serve_forever()

except KeyboardInterrupt:
	print '^C received, shutting down the web server'
	server.socket.close()

	'''
